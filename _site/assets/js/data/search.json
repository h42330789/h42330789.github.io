[
  
  {
    "title": "Telegram研究三：将源码有Bazel改为pod",
    "url": "/posts/telegram03/",
    "categories": "Telegram",
    "tags": "Telegram, pod, bazel",
    "date": "2024-01-13 01:04:00 +0800",
    





    
    "snippet": "命令格式：lipo -info [.a 文件] lipo -info ./Debug-iphoneos/libimsdk.a命令格式：lipo -create [待合并的. a] [待合并的. a] -output [要生成的文件名]lipo -create ./Debug-iphonesimulator/libimsdk.a ./Debug-iphoneos/libimsdk.a -out...",
    "content": "命令格式：lipo -info [.a 文件] lipo -info ./Debug-iphoneos/libimsdk.a命令格式：lipo -create [待合并的. a] [待合并的. a] -output [要生成的文件名]lipo -create ./Debug-iphonesimulator/libimsdk.a ./Debug-iphoneos/libimsdk.a -output ./libimsdk.a简单的做法就是直接将工程编译后的产物拿来引用一、需要研究如何将Telegram里的third-party里的三方库编译成pod库webpmozjpeglibjxl二、需要研究如何将Telegram里的submodules里的三方库编译成pod库ffmpeg 使用ffmpeg-kit-ios-full代替sqlchiperrlottie最近在将Telegram改成pod引入时遇到的一些问题target has transitive dependencies that include static binaries以webp为例，podspec的写法Pod::Spec.new do |s|    s.name         = \"webp\"    s.version      = \"1.0.0\"    s.authors      = { 'xxx' =&gt; 'xx@xx.dev'}    s.summary      = 'xxxx'    s.source        = { :git =&gt; \"https://github.com/TextureGroup/Texture.git\", :tag =&gt; s.version.to_s }        s.license = 'MIT'    s.homepage = 'http://www.example.com'    s.requires_arc  = true    s.ios.deployment_target = \"12.0\"    # 使用编译后的内容    s.public_header_files = ['Public/**/*.h']    s.source_files  = [\"Public/**/*.h\"]    # 依赖的静态库    s.ios.vendored_libraries = 'Public/**/*.a'    s.static_framework = true    # s.ios.vendored_frameworks = 'xxx/xxx.framework'    s.frameworks = \"Foundation\", \"UIKit\"end解决方案，修改Podfile的写法use_frameworks! :linkage =&gt; :staticPodfile的写法platform :ios, '12.0'target 'StudyAsynDisplay' do  use_frameworks! :linkage =&gt; :static  # Pods for StudyAsynDisplay  pod \"webp\", :path =&gt; 'LocalLib/webp'end"
  },
  
  {
    "title": "Telegram研究二：运行Telegram",
    "url": "/posts/telegram02/",
    "categories": "Telegram",
    "tags": "Telegram",
    "date": "2024-01-13 01:04:00 +0800",
    





    
    "snippet": "参考：  https://github.com/TelegramMessenger/Telegram-iOS/issues/849 https://github.com/TelegramMessenger/Telegram-iOS/issues/877 https://github.com/TelegramMessenger/Telegram-iOS https://telegra.ph/t...",
    "content": "参考：  https://github.com/TelegramMessenger/Telegram-iOS/issues/849 https://github.com/TelegramMessenger/Telegram-iOS/issues/877 https://github.com/TelegramMessenger/Telegram-iOS https://telegra.ph/tgiostests-01-07 https://www.doudianpu.com/telegram/   telegram-ioser-ci-kai-fa-zhi-nan-googlezhong-du-yi-lai-zhe-de-huan-jing-da-jian-yu-dai-ma-bian-yi/2023.11.01更新环境Intel MacOS 14.0 Sonama / M1 MacOS 14.0 Sonamajava version “18.0.1”Python 3.11.4Xcode 15.0.1下载项目及配置环境过程查看底部之前说明，配置好后执行如下命令生成项目python3 build-system/Make/Make.py \\    --overrideXcodeVersion \\    --cacheDir=\"$HOME/telegram-bazel-cache\" \\    generateProject \\    --configurationPath=\"$HOME/telegram-configuration/development-configuration.json\"  \\    --codesigningInformationPath \"$HOME/telegram-configuration/fake-codesigning\" \\    --disableExtensions \\    --disableProvisioningProfiles问题一、升级MacOS和Xcode后运行Telegram报如下错误  error: Could not parse Swift versions from: Swift/ErrorType.swift:200: Fatal error: Error raised at top level: Error Domain=NSCocoaErrorDomain Code=4 \"The file “swiftc” doesn’t exist.\" UserInfo={NSFilePath=swiftc}解决方案：拉取最新代码后重新生成，Telegram官方最新代码已经解决此问题问题二、报证书过期，设置了忽略证书不生效  ERROR: /Users/macbookpro/Documents/third/telegram/Telegram-iOS/Telegram/BUILD:1955:16: ProcessEntitlementsFiles Telegram/Telegram_entitlements.entitlements failed: (Exit 1): plisttool failed: error executing command (from target //Telegram:Telegram)  (cd /private/var/tmp/_bazel_macbookpro/c16a409a18375be2510dd63bad28d118/rules_xcodeproj.noindex/build_output_base/execroot/main &amp;&amp;   exec env -     APPLE_SDK_PLATFORM=iPhoneSimulator     APPLE_SDK_VERSION_OVERRIDE=17.0     XCODE_VERSION_OVERRIDE=15.0.1.15A507  ` bazel-out/darwin-opt-exec-2B5CBBC6-ST-8c945a9593fc/bin/external/build_bazel_rules_apple/tools/plisttool/plisttool bazel-out/applebin_ios-ios_x86_64-dbg-ST-0c73515f5804/bin/Telegram/entitlements/Telegramplisttool-control)`  Configuration: 078c4bfe815fe328888eed3a62d860580dd34d0b8b7fffcfa3835ee84d3c101c  Execution platform: @local_config_platform//:host  ERROR: On target \"@//Telegram:Telegram\", provisioning profile ExpirationDate (\"2023-10-27T19:16:43\") is in the past.INFO: Elapsed time: 7.171s, Critical Path: 6.37sINFO: 204 processes: 165 internal, 39 local.FAILED: Build did NOT complete successfullyerror: The bazel build failed, please check the report navigator, which may have more context about the failure.`解决方案将相关对证书校验相关的脚本内容注释掉即可1、搜索：provisioning profile ExpirationDate得到ENTITLEMENTS_PROFILE_HAS_EXPIRED2、搜索：ENTITLEMENTS_PROFILE_HAS_EXPIRED得到调用这个地方，注释掉即可# if expire and expire &lt; datetime.datetime.now():    #   raise PlistToolError(ENTITLEMENTS_PROFILE_HAS_EXPIRED % (    #       self.target, expire.isoformat()))问题三、OSSpinLock报错  /Users/macbookpro/Documents/third/telegram/Telegram-iOS/submodules/AsyncDisplayKit/Source/PublicHeaders/AsyncDisplayKit/ASRecursiveUnfairLock.h:70:3: 'OSSpinLock' is deprecated: first deprecated in iOS 10.0 - Use os_unfair_lock() from &lt;os/lock.h&gt; instead [-Werror,-Wdeprecated-declarations]解决方案：将#define AS_USE_OS_LOCK false改成#define AS_USE_OS_LOCK true成功运行并使用Lookin查看UI环境Intel MacOS 12.1java version “18.0.1”Python 3.8.9Xcode 13.4.1master最新分支release-9.0.21、clone源代码git clone --recursive -j8 https://github.com/TelegramMessenger/Telegram-iOS.git2.1、进入下载后的源代码，cd Telegram-iOS2.2 并创建配置参数mkdir -p $HOME/telegram-configurationcp -R build-system/example-configuration/* $HOME/telegram-configuration/3、创建xcode项目python3 build-system/Make/Make.py \\    --overrideXcodeVersion \\    --cacheDir=\"$HOME/telegram-bazel-cache\" \\    generateProject \\    --configurationPath=\"$HOME/telegram-configuration/development-configuration.json\"  \\    --codesigningInformationPath \"$HOME/telegram-configuration/fake-codesigning\" \\    --disableExtensions \\    --disableProvisioningProfiles错误：Make generateProject: error: one of the arguments --gitCodesigningRepository --codesigningInformationPath is required  解决方式：1、将xxx/Telegram-iOS/build-system/fake-codesigning  复制到 ~telegram-configuration/fake-codesigning2、将 xxx/Telegram-iOS/build-system/appstore-configuration.json 复制到 ~/telegram-configuration/development-configuration.json增加参数：--codesigningInformationPath \"$HOME/telegram-configuration/fake-codesigning\"报xcode版本不匹配Required Xcode version is 14.0, but 13.4.1 is reported by 'xcode-select -p'解决方式：  将xxxx/Telegram-iOS/versions.json中的xcode版本改为安装版本一致即可或者增加参数--overrideXcodeVersion但是我本地报Make: error: unrecognized arguments: --overrideXcodeVersion将--overrideXcodeVersion放在命令的generatProject前面就可以解决改完后重新执行创建xcode项目的命令，然后就可以正常的创建项目了还遇到如下问题：Could not parse the Xcode version from /Library/Developer/CommandLineTools/../Info.plist解决方案sudo xcode-select --resetsudo xcode-select --switch /Applications/Xcode.app创建好项目后编译报错Showing Recent Errors Only/Users/aaa/Documents/workspace/Telegram-source/Telegram-iOS/Telegram/BUILD:1952:16: ProcessEntitlementsFiles Telegram/Telegram_entitlements.entitlements failed: (Exit 1): plisttool failed: error executing commandOn target \"//Telegram:Telegram\", provisioning profile ExpirationDate (\"2022-10-26T17:10:00\") is in the past.Build did NOT complete successfully/Users/aaa/Documents/workspace/Telegram-source/Telegram-iOS/build-input/gen/project/Telegram.xcodeproj/.tulsi/Scripts/bazel_build.py:590: Bazel build failed with exit code 1. Please check the build log in Report Navigator (⌘9) for more information.这是因为使用的证书都过期了，需要增加--disableProvisioningProfiles的参数/Users/aaa/Documents/workspace/Telegram-source/Telegram-iOS/submodules/Media/LocalAudioTranscription/Sources/LocalAudioTranscription.swift:57:37: Value of type 'SFSpeechURLRecognitionRequest' has no member 'addsPunctuation'原因是最新代码已经使用了iOS16的内容，xcode13不支持这个编译，暂时方式一：注释或使用kvo的方式解决方式二：升级xcode到最新版本xcode14.0.1Showing Recent Errors Only/Users/aaa/Documents/workspace/Telegram-source/Telegram-iOS/submodules/AsyncDisplayKit/BUILD:9:13: Compiling submodules/AsyncDisplayKit/Source/ASControlNode.mm failed: (Aborted): wrapped_clang_pp failed: error executing command/Users/aaa/Documents/workspace/Telegram-source/Telegram-iOS/submodules/AsyncDisplayKit/Source/PublicHeaders/AsyncDisplayKit/ASRecursiveUnfairLock.h:70:3: 'OSSpinLock' is deprecated: first deprecated in iOS 10.0 - Use os_unfair_lock() from &lt;os/lock.h&gt; instead/Users/aaa/Documents/workspace/Telegram-source/Telegram-iOS/submodules/AsyncDisplayKit/Source/PublicHeaders/AsyncDisplayKit/ASThread.h:282:5: 'OSSpinLock' is deprecated: first deprecated in iOS 10.0 - Use os_unfair_lock() from &lt;os/lock.h&gt; instead/Users/aaa/Documents/workspace/Telegram-source/Telegram-iOS/submodules/AsyncDisplayKit/Source/PublicHeaders/AsyncDisplayKit/ASThread.h:153:21: 'OSSpinLockTry' is deprecated: first deprecated in iOS 10.0 - Use os_unfair_lock_trylock() from &lt;os/lock.h&gt; instead/Users/aaa/Documents/workspace/Telegram-source/Telegram-iOS/submodules/AsyncDisplayKit/Source/PublicHeaders/AsyncDisplayKit/ASThread.h:178:11: 'OSSpinLockLock' is deprecated: first deprecated in iOS 10.0 - Use os_unfair_lock_lock() from &lt;os/lock.h&gt; instead/Users/aaa/Documents/workspace/Telegram-source/Telegram-iOS/submodules/AsyncDisplayKit/Source/PublicHeaders/AsyncDisplayKit/ASThread.h:201:11: 'OSSpinLockUnlock' is deprecated: first deprecated in iOS 10.0 - Use os_unfair_lock_unlock() from &lt;os/lock.h&gt; insteadBuild did NOT complete successfully/Users/aaa/Documents/workspace/Telegram-source/Telegram-iOS/build-input/gen/project/Telegram.xcodeproj/.tulsi/Scripts/bazel_build.py:590: Bazel build failed with exit code 1. Please check the build log in Report Navigator (⌘9) for more information.将#define AS_USE_OS_LOCK false改成#define AS_USE_OS_LOCK true运行成功"
  },
  
  {
    "title": "Telegram研究一：参考资料",
    "url": "/posts/telegram01/",
    "categories": "Telegram",
    "tags": "Telegram, im",
    "date": "2024-01-13 01:04:00 +0800",
    





    
    "snippet": "macos版本： https://github.com/overtake/TelegramSwiftiOS版本（Swift）： https://github.com/TelegramMessenger/Telegram-iOSiOS版本（OC旧版本）https://github.com/peter-iakovlev/Telegram网页版本：https://github.com/moreth...",
    "content": "macos版本： https://github.com/overtake/TelegramSwiftiOS版本（Swift）： https://github.com/TelegramMessenger/Telegram-iOSiOS版本（OC旧版本）https://github.com/peter-iakovlev/Telegram网页版本：https://github.com/morethanwords/tweb资源 https://github.com/itgoyo/TelegramGroup即时通讯网https://github.com/JackJiang2011/MobileIMSDKhttps://github.com/arthenica/ffmpeg-kit其他开源IMSignal，主打私密性，老马推荐Use SignalWire 加密聊天IM Telegram (9)Build and Run Telegram-iOS v7.3 in Simulator with BazelBuild and Run Telegram-iOS v7.2 in Xcode 12.x Simulator with BuckSource Code Walkthrough of Telegram-iOS Part-7: Link Preview and Instant ViewSource Code Walkthrough of Telegram-iOS Part 6: BubblesSource Code Walkthrough of Telegram-iOS Part 5: AsyncDisplayKitSource Code Walkthrough of Telegram-iOS Part 4: MTProto ConnectionsSource Code Walkthrough of Telegram-iOS Part 3: Other FoundationsSource Code Walkthrough of Telegram-iOS Part 2: SSignalKitSource Code Walkthrough of Telegram-iOS: Part 1翻译：Telegram-iOS 源码分析：第一部分Telegram-iOS 源码分析：第二部分（SSignalKit）Telegram-iOS 源码分析：第三部分（Other Foundations）Telegram-iOS 源码分析：第四部分（MTProto）Telegram-iOS 源码分析：第五部分（AsyncDisplayKit）Telegram-iOS 源码分析：第六部分（Bubbles）Telegram-iOS 源码分析：第七部分（Link Preview and Instant View）开源IM之Telegram源码编译及部分解析 https://juejin.cn/post/7003978718662098952基于Telegram二次开发 — 环境篇基于Telegram二次开发 — 打包篇基于Telegram二次开发 — App一级页面逻辑基于Telegram二次开发"
  },
  
  {
    "title": "Bazel研究一：运行HelloWorld",
    "url": "/posts/bazel01/",
    "categories": "Bazel",
    "tags": "bazel",
    "date": "2024-01-13 01:04:00 +0800",
    





    
    "snippet": "  前言  源码：https://github.com/h42330789/StudyBazel一直想研究Telegram的源码，下载下来按步骤能正常在模拟器运行，想使用LookIn这个工具研究下，方便查看研究，发现Telegram是使用Bazel管理的大门，不知道如何集成LookIn，特研究学习下Bazel一、安装Bzael参考：在 macOS 上安装 Bazel Bazel教程：构建iO...",
    "content": "  前言  源码：https://github.com/h42330789/StudyBazel一直想研究Telegram的源码，下载下来按步骤能正常在模拟器运行，想使用LookIn这个工具研究下，方便查看研究，发现Telegram是使用Bazel管理的大门，不知道如何集成LookIn，特研究学习下Bazel一、安装Bzael参考：在 macOS 上安装 Bazel Bazel教程：构建iOS应用[翻译]基于 Bazel 的 iOS Monorepo 工程实践Bazel iOS Hello World (Objective-C, Mac M1)Build an iOS Framework (Objective-C) by Bazelhttps://github.com/deeplearningmakeeasy/bazelioshelloworldhttps://medium.com/@DeepLearningMakeEasy# 使用brew安装 bazelbrew install bazel# 查看bazel版本bazel --version####二、准备一个空项目HelloOC2.1 使用Xcode创建一个HelloOC的项目，然后删掉配置文件，只保留源码文件2.2 在HelloOC同层文件夹下创建WORKSPACE文件，内容如下：load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")# rules required for ios-apphttp_archive(    name = \"build_bazel_rules_apple\",    sha256 = \"cd3b62efed8eaf306050817205d5139de3189be422ee009038783c3da0b04483\",    strip_prefix = \"rules_apple-5b7c929ec4f3618a3f558c7ccae64f155f2646b7\",    url = \"https://github.com/bazelbuild/rules_apple/archive/5b7c929ec4f3618a3f558c7ccae64f155f2646b7.tar.gz\",)load(    \"@build_bazel_rules_apple//apple:repositories.bzl\",    \"apple_rules_dependencies\",)apple_rules_dependencies()load(    \"@build_bazel_rules_swift//swift:repositories.bzl\",    \"swift_rules_dependencies\",)swift_rules_dependencies()load(    \"@build_bazel_rules_swift//swift:extras.bzl\",    \"swift_rules_extra_dependencies\",)swift_rules_extra_dependencies()load(    \"@build_bazel_apple_support//lib:repositories.bzl\",    \"apple_support_dependencies\",)apple_support_dependencies()# rules required by ios-app Xcode integrationhttp_archive(    name = \"rules_xcodeproj\",    sha256 = \"7967b372bd1777214ce65c87a82ac0630150b7504b443de0315ea52e45758e0c\",    url = \"https://github.com/MobileNativeFoundation/rules_xcodeproj/releases/download/1.3.3/release.tar.gz\",)load(    \"@rules_xcodeproj//xcodeproj:repositories.bzl\",    \"xcodeproj_rules_dependencies\",)xcodeproj_rules_dependencies()# rules required by backendhttp_archive(    name = \"io_bazel_rules_appengine\",    strip_prefix = \"rules_appengine-03121ae8efa634f7219f53970650a4445a72b759\",    # TODO: update to a release version that contains 339f6aba67fcedb7268cf54d1163cf7704a277ca.    # This commit fixes the Maven artifact URLs to use \"https\" instead of \"http\".    # We don't specify sha256, because the sha256 of GitHub-served non-release archives isn't    # stable.    urls = [\"https://github.com/bazelbuild/rules_appengine/archive/03121ae8efa634f7219f53970650a4445a72b759.tar.gz\"],)load(    \"@io_bazel_rules_appengine//appengine:java_appengine.bzl\",    \"java_appengine_repositories\",)2.3 在HelloOC里创建BUILD文件，内如如下：# load ios application ruleload(\"@build_bazel_rules_apple//apple:ios.bzl\", \"ios_application\")# load build in objc_library rule load(\"@rules_cc//cc:defs.bzl\", \"objc_library\")load(    \"@rules_xcodeproj//xcodeproj:defs.bzl\",    \"top_level_target\",    \"xcodeproj\",)# 源代码的库objc_library(    # 名字随意取    name = \"HelloWorldOC_source\",    srcs = [        # 这里可以全部单独列出来，也可以使用*.m这样的通配符方式        \"Source/AppDelegate.m\",        \"Source/SceneDelegate.m\",        \"Source/ViewController.m\",        \"Source/main.m\",    ],    hdrs = glob([\"Source/*.h\"]),    # 资源文件    data = [        \"Source/Base.lproj/Main.storyboard\",        \"Source/Base.lproj/LaunchScreen.storyboard\",    ],    deps = [])# 生成ipa，bazel build //BUILD所在文件夹名称:ios_application的名称# bazel build //HelloOC:My-HelloOC-app# 模拟器运行，bazel run //BUILD所在文件夹名称:ios_application的名称# bazel run //HelloOC:My-HelloOC-appios_application(    # 名字随便起，用于生成ipa使用    name = \"My-HelloOC-app\",    # 这个bundle_id一定要与Info.plist里的一致    bundle_id = \"studyBazel.helloOC.aa\",    # 支持的版本    families = [        \"iphone\",        \"ipad\",    ],    infoplists = [\"Source/Info.plist\"],    launch_storyboard = \"Source/Base.lproj/LaunchScreen.storyboard\",    app_icons = glob([\"Source/Assets.xcassets/AppIcon.appiconset/*.png\"])         + glob([\"Source/Assets.xcassets/AppIcon.appiconset/*.json\"]),    # 支持的iOS最小版本    minimum_os_version = \"13.0\",    # provisioning_profile = \"&lt;your_profile_name&gt;.mobileprovision\", # Uncomment and set your own profile.    visibility = [\"//visibility:public\"],    # 依赖的源代码    deps = [\":HelloWorldOC_source\"],)# 这里是为了生存Xcodeproj文件# bazel run //BUILD所在文件夹名称:xcodeproj的名称，会生成一个xxx.xcodeproj的文件# bazel run //HelloOC:my_xcodeprojxcodeproj(    name = \"my_xcodeproj\",    build_mode = \"bazel\",    # 生成的xxx.codeproj的名称    project_name = \"My_helloOC\",    tags = [\"manual\"],    top_level_targets = [        top_level_target(            # 要与ios_application里定义的名字一样            \":My-HelloOC-app\",            target_environments = [\"simulator\"],        ),    ],)三、运行命令：# 生成ipa，bazel build //BUILD所在文件夹名称:ios_application的名称bazel build //HelloOC:My-HelloOC-app# 模拟器运行，bazel run //BUILD所在文件夹名称:ios_application的名称bazel run //HelloOC:My-HelloOC-app# 生成xcode项目# bazel run //BUILD所在文件夹名称:xcodeproj的名称，会生成一个xxx.xcodeproj的文件bazel run //HelloOC:my_xcodeproj四、截图：整体结构如下：运行效果："
  }
  
]

